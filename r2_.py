from sklearn.metrics import r2_score
import scipy.signal
import mne

def process(data):
    same_index = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 57, 59, 60]

    ch_types = []
    data_ = []
    ch_names = []
    for i in range(len(same_index)):
        ch_types.append('eeg')
        data_.append(data[:, 0, same_index[i], 0])
        ch_names.append('Fpz')
#         ch_names.append(ch_list[same_index[i]])

    sfreq = 500.0  # 采样频率
    info = mne.create_info(ch_names=ch_names, sfreq=sfreq, ch_types=ch_types)

    # 创建数据对象 data(30, 500)
    raw = mne.io.RawArray(data_, info)

    # 0.1Hz~100Hz高低通滤波，以及50Hz陷波滤波
    raw_hlfilter = raw.filter(l_freq=0.1, h_freq=100,method='fir')
    raw_hltfilter = raw_hlfilter.notch_filter(freqs=50)

    # 选取平均值为参考通道
    raw_ref = raw_hltfilter.set_eeg_reference(ref_channels = 'average')

    # 设定时间和通道
    time_start = 0.
    time_end = 1.
    picks = mne.pick_types(raw.info, eeg=True, exclude='bads')
    t_idx = raw.time_as_index([time_start, time_end])

    datas, times = raw_ref[picks, t_idx[0]:t_idx[1]]
    
    return datas

def r2_cal(data):
    data_true = [0.0030920021496328915, 0.15940514758289287, 0.3040563716399027, 0.1228471142357346, 0.0291392557900152, 0.029561253069751426, 0.002330136538565359, 0.008849120640480492, 0.00037888383640000156, 0.0020251494105798552, 0.00034493804263635607, 0.0002775518851611071, 0.00014149761344857878, 0.0002380136494821316, 4.504926389005581e-05, 2.3391784619416724e-05, 1.5274290799854733e-05, 1.6200426851279868e-05, 8.062605829073415e-05, 3.698312525263417e-05, 0.0001236914362769277, 9.417106066861288e-05, 3.8524959799134965e-05, 1.4490413829800914e-05, 4.423274219108362e-05, 3.078534674390445e-05, 1.2254174621436246e-05, 3.061503770745889e-06, 4.5683616685594215e-05, 3.915821360103971e-05, 7.4552510742639e-05, 5.75409537811536e-05, 1.1998080533289889e-05, 4.7586072567678274e-06, 2.193632204307236e-06, 1.2284822403792803e-06, 6.269199184473694e-06, 2.4411020299874124e-06, 1.6138679699214559e-06, 5.53714791539848e-06, 3.9118332164463175e-06, 5.355069853591656e-06, 7.488425409556851e-06, 1.5865783435320278e-06, 7.621398815437645e-08, 4.0942579693603544e-07, 1.0113076932550602e-07, 5.4014844900623e-07, 3.5523094580136715e-07, 7.701312055718343e-07, 3.588624216913503e-07, 7.481119497073005e-07, 6.222977011764152e-07, 1.5766293543117177e-07, 1.696419553255816e-08, 7.040174668960509e-08, 1.4483713287410257e-08, 3.376073928629377e-08, 4.770575990818909e-08, 1.318266613459317e-07, 1.823576915384208e-08, 6.264897829378985e-08, 9.117777657977397e-08, 5.5676364387869825e-08, 2.4952969423323957e-08, 2.07173164272917e-08, 1.0745201162722459e-09, 2.108467480533116e-08, 4.185525928582682e-09, 3.0089067115208945e-08, 2.4298070481960605e-08, 3.1629754591502e-08, 4.978511959018893e-08, 1.5483940336828222e-08, 3.137914133506853e-09, 9.553242077902972e-09, 8.383354867277751e-09, 1.536643365410099e-08, 5.702108607279155e-08, 9.397862952466682e-09, 2.03912326074496e-08, 2.3943114495459943e-08, 6.250755582750619e-09, 5.252677717266193e-10, 1.501750424109553e-09, 1.745323232994892e-09, 8.90022028351985e-09, 3.2337327498239426e-08, 9.173928609051755e-09, 4.429832033110957e-09, 1.192861277158638e-08, 1.3248501878039598e-09, 3.3055655808838354e-09, 3.636980958501826e-09, 8.222541891069404e-09, 3.3519262633346706e-09, 7.084385804772223e-10, 6.817380608065311e-09, 2.324435599356716e-09, 8.340586807774476e-09]
    
    data_pro = process(data)
    
    (f, S)= scipy.signal.welch(data_pro, 500, nperseg=1000)
    
    r2 = r2_score(data_true, S[27,0:100])
    
    return r2